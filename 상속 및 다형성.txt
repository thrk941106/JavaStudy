A <- B
class A{} 메소드 printA
class B extends{} printB

A a = new B() O
a 에는 A만 담을 수 있음 -> B가 SUPER로 상속받아서. A를 만듬 -> a에는 B에서 만들어진 A가 할당됨 

B b = new A() X
b 에는 B만 담을 수 있음 -> A를 생성할 때 B는 안만듬. -> 안되는 코드


A a = new B() -> 이런식 코드를 많이 씀! why?

a.printA 만 가능. a는 A클래스를 가르킴 -> 그냥 new A하면 되지 굳이 왜??

A <- B
class A{} 메소드 printA
class B extends{} printB, 오버라이딩(인풋과 리턴 다 같음) 된 printA

A a = new B() 
a.printA
하면 B에서 오버라이딩 된 printA가 나옴! -> 다형성

* 다형성 *
1. 상속관계
2. 메소드 오버라이딩
3. A a = new B();

세가지가 다 생겨야됨!!

ex)

class 동그라미{
	public void 그리기(){
	}

}

class 사각형{
	public void 그리기(){
	}

}

class 오각형{
	public void 그리기(){
	}

}





-->
abstract class 도형{ // 추상 화 클래스
	abstract public void 그리기() //추상화 메소드
}
class 동그라미 extands 도형{//클래스 상속
	public void 그리기(){//그리기 메소드 오버라이딩
		
	}

}

class 사각형 extands 도형{
	public void 그리기(){

	}

}

class 오각형 extands 도형{
	public void 그리기(){

	}

}

도형 a = new 동그라미;
도형 a = new 사각형; 
도형 a = new 오각형; 
.
.
.

해서 
화면에 드래그해서 도형 그리기(도형 a)
하면 위에서 선언된 친구가 오버라이딩한 그리기를 노출시킴


classs 그림판 {
	public void 화면에 드래그해서 동그라미 그리기(동그라미 r){
		r.그리기();
	}
	public void 화면에 드래그해서 사각형 그리기(사각형 r){
		r.그리기();
	}	
	public void 화면에 드래그해서 오각형 그리기(오각형 r){
		r.그리기();
	}	
	--> 도형마다 메소드 그려야함!!

	-> 밑에 처럼 하면 됨!
	public void 화면에 드래그해서 도형 그리기(도형 a) {
		a.그리기();
		-> 오버라이딩 된 메소드 노출
	}
	
}
